/* Copyright (c) 2023 The ZMK Contributors
 * SPDX-License-Identifier: MIT */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define L0 0
#define L1 1
#define L2 2
#define L3 3
#define combo_timeout 30
#define combo_timeout_long 60
#define combo_global_quick_tap 150
#define combo_global_quick_tap_long 300

/ {
    combos {
        compatible = "zmk,combos";

        combo_L2 {
            timeout-ms = <combo_timeout>;
            key-positions = <30 43>;

            //layers = <BASE WIN NAV NUM>;

            bindings = <&to L2>;
        };

        combo_L3 {
            timeout-ms = <combo_timeout>;
            key-positions = <43 44>;

            //layers = <BASE WIN NAV NUM>;

            bindings = <&to L3>;
        };
    };

    behaviors {
        quo: quo {
            compatible = "zmk,behavior-mod-morph";
            label = "quotes";
            #binding-cells = <0>;
            bindings = <&kp SQT>, <&kp DQT>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        round: round {
            compatible = "zmk,behavior-mod-morph";
            label = "round";
            #binding-cells = <0>;
            bindings = <&kp LPAR>, <&kp RPAR>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        square: square {
            compatible = "zmk,behavior-mod-morph";
            label = "square";
            #binding-cells = <0>;
            bindings = <&kp LBKT>, <&kp RBKT>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        curly: curly {
            compatible = "zmk,behavior-mod-morph";
            label = "curly";
            #binding-cells = <0>;
            bindings = <&kp LBRC>, <&kp RBRC>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        angled: angled {
            compatible = "zmk,behavior-mod-morph";
            label = "angled";
            #binding-cells = <0>;
            bindings = <&kp LT>, <&kp GT>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bslash_ex: bslash_ex {
            compatible = "zmk,behavior-mod-morph";
            label = "bslash_ex";
            #binding-cells = <0>;
            bindings = <&kp BSLH>, <&kp EXCLAMATION>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        slash: slash {
            compatible = "zmk,behavior-mod-morph";
            label = "slash";
            #binding-cells = <0>;
            bindings = <&kp FSLH>, <&kp BSLH>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // Double symbols   

        qmark: qmark {
            compatible = "zmk,behavior-mod-morph";
            label = "qmark";
            #binding-cells = <0>;
            bindings = <&kp QMARK>, <&kp EXCLAMATION>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        money: money {
            compatible = "zmk,behavior-mod-morph";
            label = "money";
            #binding-cells = <0>;
            bindings = <&kp DOLLAR>, <&kp POUND>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bool: bool {
            compatible = "zmk,behavior-mod-morph";
            label = "bool";
            #binding-cells = <0>;
            bindings = <&kp AMPERSAND>, <&kp PIPE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        hash: hash {
            compatible = "zmk,behavior-mod-morph";
            label = "hash";
            #binding-cells = <0>;
            bindings = <&kp HASH>, <&kp TILDE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        at_prc: at_prc {
            compatible = "zmk,behavior-mod-morph";
            label = "at_prc";
            #binding-cells = <0>;
            bindings = <&kp AT_SIGN>, <&kp PERCENT>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    macros {
        hard_dqt: hard_dqt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N0 &kp N1 &kp N6 &kp N3>;
            label = "HARD_DQT";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        //                        Needed near:  = - _

        L0 {
            bindings = <
&kp ESC    &kp Q  &kp W  &kp E     &kp R     &kp T                                       &kp Y      &kp U     &kp I      &kp O    &kp P     &kp DEL
&kp TAB    &kp A  &kp S  &kp D     &kp F     &kp G                                       &kp H      &kp J     &kp K      &kp L    &kp SEMI  &kp MINUS
&kp LCTRL  &kp Z  &kp X  &kp C     &kp V     &kp B      &to L3  &none   &none   &none    &kp N      &kp M     &kp COMMA  &kp DOT  &kp FSLH  &bslash_ex
                         &kp LGUI  &kp LALT  &kp LSHFT  &to L0  &to L1  &to L2  &kp RET  &kp SPACE  &kp BSPC  &kp RALT
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        L1 {
            bindings = <
&trans  &kp LBKT   &kp RBKT   &kp LBRC  &kp RBRC           &kp PSCRN                                   &kp PLUS   &kp N7  &kp N8  &kp N9  &kp FSLH   &trans
&trans  &kp LT     &kp GT     &kp LPAR  &kp RPAR           &quo                                        &kp EQUAL  &kp N4  &kp N5  &kp N6  &kp STAR   &trans
&trans  &kp GRAVE  &hard_dqt  &kp DQT   &kp DOUBLE_QUOTES  &kp INSERT  &trans  &trans  &trans  &trans  &kp MINUS  &kp N1  &kp N2  &kp N3  &kp CARET  &trans
                              &trans    &trans             &trans      &trans  &trans  &trans  &trans  &trans     &trans  &kp N0
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PG_DN &inc_dec_kp PG_UP PG_DN>;
        };

        // DEEEEEEEEEEEEEEEEEEEEL
        //╭───────────┬─── @ % ───┬─── # ~ ───┬─── & | ───┬─── / \ ───┬───────────
        //  &trans      &at_prc     &hash       &bool       &slash      &kp PSCRN
        //├─── ' " ───
        //  &quo
        //├───────────┼─── ` ¬ ───┼─── £ $ ───┼───────────┼─── ? ! ───┼───────────
        //  &trans      &kp  GRAVE  &money      &none       &qmark      &kp INSERT
        //╰───────────┴───────────┴───────────┼───────────┼──────────┬┼┬──────────
        // DEEEEEEEEEEEEEEEEEEEEL

        L2 {
            bindings = <
&trans  &none  &none  &none   &none   &none                                   &kp C_PP  &kp C_PREV  &kp C_NEXT  &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP
&trans  &none  &none  &none   &none   &none                                   &none     &kp LEFT    &kp UP      &kp DOWN    &kp RIGHT     &trans
&trans  &none  &none  &none   &none   &none   &trans  &trans  &trans  &trans  &none     &none       &none       &none       &none         &trans
                      &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans      &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp C_BRI_INC C_BRI_DEC>;
        };

        L3 {
            bindings = <
&trans  &bt BT_CLR    &none         &none         &none         &sys_reset                                    &none        &kp F7  &kp F8  &kp F9  &kp F12  &trans
&none   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                                  &sys_reset   &kp F4  &kp F5  &kp F6  &kp F11  &trans
&trans  &none         &none         &none         &none         &bootloader   &trans  &trans  &trans  &trans  &bootloader  &kp F1  &kp F2  &kp F3  &kp F10  &trans
                                    &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans       &trans  &trans
            >;

            sensor-bindings = <&inc_dec_kp LEFT RIGHT &inc_dec_kp LEFT RIGHT>;
        };
    };
};
